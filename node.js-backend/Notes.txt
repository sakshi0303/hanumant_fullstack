// Node.js--> run time environment (when we run the code it will exexute)
// node.js runs in terminal and  runs javascript outside the browser
// connect with
// it is not a programing language
//
// chrome has javasrict version v-8 enginer
// firefox-> spidermonkey
// // npm init -y ()
// --npm i express mongodb
// --package.json--> basic information
// --go to mongodb website and go to products and click on Try COMMUNITY Edition
// seach npm, find mongodb,express and get mongodb/express code

//// middle ware are fucntion in which we modify request and response and are used with routes via 'use' keyword


step1: server create 
step2: create data base and connect it to server
step3:model-> schema(collection)
step4:controller-> create fucntion related to fucntion
step5:routes-> make route to run the function
server.js-> app.use()



download in brew
// npm i express 
// npm i -g nodemon (server keeps on running)

// mongo db compass :
//download mongodb compass:
// db--> collection --> data
// Netfix

// nodemon .\server.js

// json: everything is in String
// obj: not everything in string
mongodb::
  - it is no sql database
  -here data is stored in a form of Object
  -the data stored in the collection
  -collection do not have row and columns

MONGODB CRUD functionality in CRUD
> show dbs   // show all database in that terminals
> use trail            // switched to db trail dataabase
> db.createCollection('User')   // create collection  { ok: 1 }
> db.User.insertOne({name:'sakshi',age:30})  // insert the value  acknowledged: true,
> db.User.insertMany([{name:'sakshi',age:39},{name:'sakshi2',age:44}])

it will automitically create unique id

//'User': is collection
> db.User.find(); // to display all data inside User collection in terminal
> db.User.findOne({name:"sa"}) // returns one data with objectid get single data
> db.User.find({name:'sa'}) // returns all data with respective objectid
> db.user.deleteOne({_id:ObjectId('66c5b82eeb498e0d3332d83a')})// delete single data
> db.user.deleteMany({age:23}) //multiple delete
>db.user.updateOne({name:"s"},{$set:{name:"sa-n"}})   // find, vallue with set
>db.videos.updateOne({title:'video2'},{$set:{title:'videoafteravdate-2',size:100}})
>db.videos.updateMany(
  {size:{$lt:101}}, //find
  {$set:{title:'videoafterupdatemany'}} //value
  )xw
>db.videos.updateMany({size:{$lte:100}},{$set:{size:900,title:'ssss'}})
>use trail
>db.dropDatabase('trail') // always be inside the database that you want to remove
>db.User.deleteOne({key:value})
>db.User.deleteMany([{key:value},{key:value}])
> express is minimum and flexible web/mobile application framework that is used to do API calling and creating web server


>> QUERY PARAMS:::
  app.post('/testing/:abcd', async(req,res)=>{
    console.log(res.params.abcd)
  })
  app.post('/testing/:abcd/:color', async(req,res)=>{
    console.log(req.params.abcd)
    console.log(req.params.color)
  })

>>postman http://localhost:8080/register/update/66c706d27987bb7de4b09696 


npm init -y // inistalise and create package.json
npm init i express mongodb

create server creation on port 8080 on server.js
nodemon server.js
//nodemon server.js to run
//https://www.npmjs.com/package/mongodb



// seach npm, find mongodb,express and get mongodb/express code

---------------Destructure-------:
let Obj={
  name:'sakshi',
  age:34
}

const {name,age}=Obj;
console.log(name);


-------one.js FILE ------>>
let x=10
let name='xyz'

function xyx(){
  console.log("inside xyz");
}
module.exports={x,name,xyz}

----main.js FILE ----->
let {x,name,xyz}=require('./one.js')
console.log(x)
console.log(name)
xyz();


FRONTEND Platform
    Facebook login::
    email[]
    poasspwrd []
    submit buton

    request.body.email

BACKEND Platform
    --> request after button is clicked and request is send to facebook server,
    <--- response facebook server check in database and response back accordingly


API is the way to communicate between frontend(UI,React) and backend(server and database)

app.use(express.json()) //to read json file , postman request will be send in json format


//https://www.npmjs.com/package/mongodb
// time waiting fucntion use async and await or then .catch
// app.use(express.json()) //to read json file , postman request will be send in json format
//run the nodemon server before checking in ppostman  --> nodemon server.js to run



//create-react-app has full version in it 
npx:: node-package-executor , npm:: node-package-module (to downloa files)
-> npm i -g create-react-app

// http:localhost:8080
-> npx create-react-app frontend                 
           ///(To create react frontend folder app ::::), it has npm start,npm run build npm test
           //-g means it will get stored in global
-> cd backend
  -> npm init -y (create package.json, -y is default value)
  -> npm i express mongoose nodemon (download dependency)
  -> make server.js file inside backend folder
  -> make db.js (mongoose) and connect with server.js
  -> http://local.host:8080 --> server is not run in https , always use http

models: will have schema(structure) files 
userschema.js
put validations, name ,age 
const userSchema= new mongoosh.Schema({
  name:{
    type:String,
    trim:true,
    required:true,
    minlength:3,
    maxlength:10,
    unique:true
  }
})
module.export=mongoose.model('user',userscehd)

>mongodb:: dowes not include sturture and lack alot in fucntions for Schema validation , so we will switch to mongoose


>instead of insertOne in mongodb, in mongoosedb it is userschema.create
install thunderclient if postman is not working: its alternative

if server stop when we enconter error in schema validation(min 3 character), Use try catch to display error

css test: https://exam-app-frontend-nu.vercel.app/

create 3 folder inside backend folder models,routes,controllers

in postman request: always choose json and raw and use app.use(express.json())



modle: create collection 
all fucnntion should be inside constroller of userschema


routes::
UserRoutes.js
  const router=express.Router()
  router.post('/creare',createUser)
  router.delete('/delete/:_id',deleteuser)
  router.put('/update/:_id',deleteuser)

in mongodb when we update we give objectid:'sdsf'
in mongoose when we findByIdAndUpdate update, we do not give objectid
http://localhost:8081/user/update/66cda2805dc4943c07d1dc6a



step1: server create 
step2: create data base and connect it to server
step3:model-> schema(collection)
step4:controller-> create fucntion related to fucntion
step5:routes-> make route to run the function
server.js-> app.use()


in updateuserfunction user {new:true} to get the updated data from mongodb, otherwise it will show the old data in the postman request

findbyidandupdate,findOneAndUpdate
let data=await usercollection.findByIdAndUpdate(_id,{$set:{name:name,email:email,password:password}},{new:true})
let data=await usercollection.findOneAndUpdate({email:email},{$set:{name:name,email:email,password:password}},{new:true})
   
  in postman:
    createworkspace:
    blankworkspace
    Next   
    name and only means
    create collection  user
    add request in dropdown next to user
    save request cntrl+sace
    create folder accordingly


save password in encrpted format::
> go to npm, search bcrypt.js,   /////////dont download bycrypt -> its old versoion, download only bcrypt.js
> inside backend folder download npm i bcryptjs
in userController.js  send hashpasword in 
var bcrypt = require('bcryptjs');
var salt = bcrypt.genSaltSync(10);
var hash = bcrypt.hashSync(mypassword, salt);
// Store hash in your password DB.

salt::add some character by itself in 10 
 "password": "$2a$10$Uj2sDZDpteaQHSlHyMGR4eurNQBPLR5MroxiLJp7Q3ncbdtuAyUzO",


return means end the function

LOGIN
checkwith email with findOne? checkpassword:"user not found"
check password with hash.comparesync? login successfully:"invalid credial password not found"
put in try catach? 


never change the folder name after using it, it will show red line error thoughout, but works fine

in updatebyid::
remove email, 
and define hashpssword with nothing on top because of let and const block scope(undefined is send when no password is send from  postman update request ),
 if var is used then there is no problem otherwise the code will brake 
 > we will add the salt with hashpassword=bcrypt.hassync(password,salt)
 > update hashpassword in moongoose db

 image/video:type:string in url

postscehme

 ,{timestamps:true}

 user id as foreign key
 // isadmin:{
  //   type:Boolean,
  //   default:false
  // }


  const postSchema=new mongoose.Schema({
  title:{
    type:String
  },
  //user foreign key
  user:{
    type:String,
    required:true
  },
  // isadmin:{
  //   type:Boolean,
  //   default:false
  // }
}, {
  timestamps:true /// timestamp by default mongoose
})