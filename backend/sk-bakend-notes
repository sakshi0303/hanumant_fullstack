// // npm i express
// // npm init ( to create package.json)

// // >> in backend we use only .js files

// // > server.js (in web search npm express) create server
// // > re
// // > nodemon server.js  ------TO RUN SERVER
// // ---------------------DB creation-------------
// // >db.jsx
// // > npm i mongoose
// // > npm mongoose
// // >module.export
// // database-> collection-> data
// // connect method return promise
// // twitterapp database
// // never put semicolon in dbconecton, it will not connect

// in server.js
// require()

// > 3 folder: controllers, models, routes

// ------------UserSchema ------------------------------------------------------------------
// > userSchema: collection file inside models
// > timestamps:true

// >const mongoose=require('mongoose')
// const UserSchema=new mongoose.Schema({
//     name:{
//         type:String,
//         require:true,
//         unique:true,
//     }},{timestamp:true})

// >module.exports=mongoose.model('user',UserSchema)


// ------------Controller ------------------------------------------------------------------
// > controllers:: all fucntion
// const updateuser=()=>{

// }
// module.exports=updateuser


// ------- routes: ------------------------------------------------------------------
// const express=require('express')
// const router=express.Router()
// router.post('/create',registerUser)

// >>>>in server.jsx
// > let UserRouter=require('./routes/UserRoutes')
// >app.use('/users',UserRouter)
//  // #put, same Object
// // #patch: new create Object

// ---------------------------------------------------------------------------------

//  User.create({
// User.findOne({email})

// npm bcryptjs
// var bcrypt = require('bcryptjs');
// var salt = bcrypt.genSaltSync(10);

// let hashpassword= await bcrypt.hashSync(password, salt);
// let user= await User.create({
//     name,email,
//     password:hashpassword,
//     address
// })

// app.use(express.json())



TOKENNNNN----
all user will have differnt token
at the time of token generatonn we will ise userid

jwt:::// in app extra security
jsonwebtoken npm  ::: id deleting with jwt_secret
> npm i jsonwebtoken
>In login usercontroller after password check 
>
var jwt = require('jsonwebtoken');
var token = jwt.sign({ foo: 'bar' }, 'shhhhh');
>hash password using bcrypt.js and save it in the (mongoose)db:
#token generation: json web token (delete by id)



MIDDLEWARE's are functions that modify the request and response that can be used between the routes
app.use(expres.json)

req.userid


(req,res,next)

if user login, his id will be endoced and a token is 
mongodb:

form email and submit 
>
>