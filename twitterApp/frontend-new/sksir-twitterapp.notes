npm i react-router-dom
search form in twailwind tap
copy whoel component
form login form
form signup form 
tailwing install 
make component and pages folder . convert to 
pnf 
in app.jsx 

npm i
npm i 'react-router-dom'
npm install @reduxjs/toolkit react-redux for storing the user info after login
npm i react-redux
npm install react-redux
 npm install --save react-toastify

connect frontend and backend
postman register api
 await fetch('') check in signup
let obj={
      name:nameref.current.value,
      password:passwordref.current.value,
      email:emailres.current.value
    }
    console.log(obj);
    let data=await fetch('http://localhost:8080/users/create',{
      method:'POST',
      headers:{
        'content-type':'application/json'
      },
      body:JSON.stringify(obj)
    });
    let res=await data.json()
    console.log(res)
    if (res.success){
      toast.success(res.msg,{position:'top-center'})
      navigate('/login')

    }else{
      toast.error(res.msg,{position:'top-center'})

    }
Cors:
 //cross origin resourse sharing
  > npm i coars 
  > in backend nodemon server.jsx
const cors=require('cors')
 app.use(cors())
 backend in running in 3030 post frontend is running in 8080 port so cors will allow to transfer data

doanload redux toolkit 
> src store.jsx

> download cors()

fetch api of postman
react-toastify
 npm install --save react-toastify


> make the https://redux-toolkit.js.org/tutorials/quick-start
npm install @reduxjs/toolkit react-redux in frontend

make store.js
useselector 


onchange method

let name="Couse"
let value="fullstack"
let obj={}
obj.name=value {name:"fullsstack "}
obj[name]=value {couse:"fullsstack "}


console.log(obj);
    let data=await fetch('http://localhost:8080/users/create',{
      method:'POST',
      headers:{
        'content-type':'application/json'
      },
      body:JSON.stringify(obj)
    });
    let res=await data.json()

const handleSubmit=async()=>{
    let res=await axios.post('http://localhost:8080/users/login',details)
    console.log(res.data);
    if (res.data.success){
      toast.success(res.data.msg,{position:'top-center'})
      navigate('/')

    }else{
      toast.error(res.data.msg,{position:'top-center'})

    }
}
UseRef--->
<input className="w-full px-5 py-3 rounded-lg font-medium bg-gray-100 border border-gray-200 placeholder-gray-500 text-sm focus:outline-none focus:border-gray-400 focus:bg-white"
    type="text"
    placeholder="Enter your name"
    ref={nameref}
/>

On change--->
<input
              name="email"
              className="text-gray-700 border border-gray-300 rounded py-2 px-4 block w-full focus:outline-2 focus:outline-blue-700"
              type="email"
              required
              onChange={handleChange}//event
            />
const handleChange=(e)=>{
    console.log(e.target.name);
    console.log(e.target.value);
    setdetails({...details,[e.target.name]:e.target.value}); //dynamic key-value

  }
  //npm i axios
  const handleSubmit=async()=>{
    let res=await axios.post('http://localhost:8080/users/login',details)
    console.log(res.data);
    if (res.data.success){
      toast.success(res.data.msg,{position:'top-center'})
      navigate('/')

    }else{
      toast.error(res.data.msg,{position:'top-center'})

    }


  }

to call api to backed in reduc userslice
createAsyncThunk::
https://redux-toolkit.js.org/api/createAsyncThunk


login
1) Api fetch--> response--> msg,token,success
 reactstore{login:false,token:'',user-''} 
 localstorage-- nothing in localstorage
2)Userslice store(setdetails(token))
 > navigate()
> Home
setdetails:{ login: true, token:sdf,user:''}  #user has data  in store
localstorage.setItem(login:true,toekn:'sdf', user='') #user is blank for securyu in local storage

in home page:
 > api calling in store extrareducer to get user detail based on token
2)update user in userstore
------------------------------
Skil: bootstram , tailwind sccs
Implemented a mobile responsive design using css/styled component to ensure seemless user Experiance
ExpenseTracer:
 >user can track the expenses 
 >users can add ,edit  and delete expenses
 >date based on filter for extenbility
> implemeted a mobile-responsive design using CSS/ styled  component to ensure seemless user Expense
Key Skills:
Ecom::
 -state management using React Hook and Context Api
 -integration of third party libraries (eg: axios ,material UI, react-tostify) for enhanced functionality and responsive design
-  Implemented a dynamic search bar that allow user to search products by title and Category or description

TwitteApp:
UserAuthentication:
- Build a Restful API using Express JS, node JS for handling request related to post users and comments
- implemented user registration and login using bcrypt.js for hashed password and JWT(json web token) for secure access controls
- CRUD: Enable User to create new post,edit existing post,delete post and view all post
- 
Skill,:
HTML, CSS, JavaScript,Node.js,mongodb, ExpressJS, ReactJS, Bootstram, Tailwind, api testingm redux, github

skills project and o
linkedin and github link


