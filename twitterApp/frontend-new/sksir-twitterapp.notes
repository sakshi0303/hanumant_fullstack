npm i react-router-dom
search form in twailwind tap
copy whoel component
form login form
form signup form 
tailwing install 
make component and pages folder . convert to 
pnf 
in app.jsx 

npm i
npm i 'react-router-dom'
npm install @reduxjs/toolkit react-redux for storing the user info after login
npm i react-redux
npm install react-redux
 npm install --save react-toastify

connect frontend and backend
postman register api
 await fetch('') check in signup
let obj={
      name:nameref.current.value,
      password:passwordref.current.value,
      email:emailres.current.value
    }
    console.log(obj);
    let data=await fetch('http://localhost:8080/users/create',{
      method:'POST',
      headers:{
        'content-type':'application/json'
      },
      body:JSON.stringify(obj)
    });
    let res=await data.json()
    console.log(res)
    if (res.success){
      toast.success(res.msg,{position:'top-center'})
      navigate('/login')

    }else{
      toast.error(res.msg,{position:'top-center'})

    }
Cors:
 //cross origin resourse sharing
  > npm i coars 
  > in backend nodemon server.jsx
const cors=require('cors')
 app.use(cors())
 backend in running in 3030 post frontend is running in 8080 port so cors will allow to transfer data

doanload redux toolkit 
> src store.jsx

> download cors()

fetch api of postman
react-toastify
 npm install --save react-toastify


> make the https://redux-toolkit.js.org/tutorials/quick-start
npm install @reduxjs/toolkit react-redux in frontend

make store.js
useselector 


onchange method

let name="Couse"
let value="fullstack"
let obj={}
obj.name=value {name:"fullsstack "}
obj[name]=value {couse:"fullsstack "}


console.log(obj);
    let data=await fetch('http://localhost:8080/users/create',{
      method:'POST',
      headers:{
        'content-type':'application/json'
      },
      body:JSON.stringify(obj)
    });
    let res=await data.json()

const handleSubmit=async()=>{
    let res=await axios.post('http://localhost:8080/users/login',details)
    console.log(res.data);
    if (res.data.success){
      toast.success(res.data.msg,{position:'top-center'})
      navigate('/')

    }else{
      toast.error(res.data.msg,{position:'top-center'})

    }
}
UseRef--->
<input className="w-full px-5 py-3 rounded-lg font-medium bg-gray-100 border border-gray-200 placeholder-gray-500 text-sm focus:outline-none focus:border-gray-400 focus:bg-white"
    type="text"
    placeholder="Enter your name"
    ref={nameref}
/>

On change--->
<input
              name="email"
              className="text-gray-700 border border-gray-300 rounded py-2 px-4 block w-full focus:outline-2 focus:outline-blue-700"
              type="email"
              required
              onChange={handleChange}//event
            />
const handleChange=(e)=>{
    console.log(e.target.name);
    console.log(e.target.value);
    setdetails({...details,[e.target.name]:e.target.value}); //dynamic key-value

  }
  //npm i axios
  const handleSubmit=async()=>{
    let res=await axios.post('http://localhost:8080/users/login',details)
    console.log(res.data);
    if (res.data.success){
      toast.success(res.data.msg,{position:'top-center'})
      navigate('/')

    }else{
      toast.error(res.data.msg,{position:'top-center'})

    }


  }

to call api to backed in reduc userslice
createAsyncThunk::
https://redux-toolkit.js.org/api/createAsyncThunk


login
1) Api fetch--> response--> msg,token,success
 reactstore{login:false,token:'',user-''} 
 localstorage-- nothing in localstorage
2)Userslice store(setdetails(token))
 > navigate()
> Home
setdetails:{ login: true, token:sdf,user:''}  #user has data  in store
localstorage.setItem(login:true,toekn:'sdf', user='') #user is blank for securyu in local storage

in home page:
 > api calling in store extrareducer to get user detail based on token
2)update user in userstore
------------------------------
Skil: bootstram , tailwind sccs
Implemented a mobile responsive design using css/styled component to ensure seemless user Experiance
ExpenseTracer:
 >user can track the expenses 
 >users can add ,edit  and delete expenses
 >date based on filter for extenbility
> implemeted a mobile-responsive design using CSS/ styled  component to ensure seemless user Expense
Key Skills:
Ecom::
 -state management using React Hook and Context Api
 -integration of third party libraries (eg: axios ,material UI, react-tostify) for enhanced functionality and responsive design
-  Implemented a dynamic search bar that allow user to search products by title and Category or description

TwitteApp:
UserAuthentication:
- Build a Restful API using Express JS, node JS for handling request related to post users and comments
- implemented user registration and login using bcrypt.js for hashed password and JWT(json web token) for secure access controls
- CRUD: Enable User to create new post,edit existing post,delete post and view all post
- 
Skill,:
HTML, CSS, JavaScript,Node.js,mongodb, ExpressJS, ReactJS, Bootstram, Tailwind, api testingm redux, github

skills project and o
linkedin and github link
obj.freeze()--> final



fogetpassword:::
like edemon

random token generate: npm crypto
backend : 
npm i crypto // to add random token
generate randin tijeb: reset:token

hexas : charatesdz


redux-saga
redux-flux


npm install randon string

nodemailer: to send 
in npm nodemail, go to docs::
 --https://nodemailer.com/about/
npm i nodemailer

manager google account
app pass--- search pass or else 
if not found : security , 2 step verification

app name: nodemailer 
google will generate app password: copy that and save :: njge qmqg luaa spxs

nodemailer
Created on 1:16â€¯PM

const transporter = nodemailer.createTransport({
  host: "smtp.ethereal.email",
  port: 587,
  secure: false, // true for port 465, false for other ports
  auth: {
    user: "srvsakshi03@gmail.com",
    pass: "jn7jnAPss4f63QBp6D", // nodemailer generate app passsword
  },
});

// async..await is not allowed in global scope, must use a wrapper
async function main() {
  // send mail with defined transport object
  const info = await transporter.sendMail({
    from: '"Maddison Foo Koch ðŸ‘»" <maddison53@ethereal.email>', // sender address
    to: "bar@example.com, baz@example.com", // list of receivers
    subject: "Hello âœ”", // Subject line
    text: "Hello world?", // plain text body
    html: "<b>Hello world?</b>", // html body
  });

  console.log("Message sent: %s", info.messageId);
  // Message sent: <d786aa62-4e0a-070a-47ed-0b0666549519@ethereal.email>
}



> we need a token  we create forgot-password router email is send in body
find user, gernrenate user, update user in the backend with resenttoken


-> nodemailer function sendmail
config set email,password


if function is declared below before calling we dont use arrraow function we have to use normal funciton 

--------------------------------------------------------------------------------------------------------------------------------------
in frontendt: .env is there by default

in backend download .env 
npm i dotenv
.env file creation  -->

in usercontroller
require('dotenv').config()
process.env.xyz

.gitignore
node_modules
.env

NodeMailerEmail=srvsakshi03@gmail.com
NodeMailerPasswod=njge qmqg luaa spxs



Frontend
-->click-->forgetpassword-->page-->enter your emsil -Submit ----(api post)--> BACKEND
                                                                                    1) userfind(email)
                                                                                     2)token
                                                                                     3) token push user : resettoken:token
                                                                                     4)email to the user with link
                                                                                        (localhost:8080/users/resetToekn/{Token}) 
                                                                                            |
                                                                                            |
                                                                                            |
                                                                                            gmail
 userfind(resetToken:token)       -----                    api(get)-----    (localhost:8080/users/resetToekn/{Token}) 
 page frontend(enter new password)
 submit api(put)                                                                                       

Pages::
 >static 
 >dynamic

 ejs

 window.location.href


 static and dyn dynamic page]]]

 app.get()
 res.send('<html></html>);

 2) const path=require('path')

 let pathloc=path.join(__dirname,'pages/Home.html');
 res,sebdFile(i)

 app.get('/',(req,res)=>{

  res.sendFile(pathloc)
 }))


 3) Dynamic data :: template engines pug and eug

 const path=require('path')

 let pathloc=path.join(__dirname,'pages/Home.html');
 res,sebdFile(i)

 app.get('/',(req,res)=>{
  let obj={
    name:"sakshi",
    age:32
  }


  res.sendFile(pathloc)
 }))
 npm i ejs
 we need one folder : views
Embedded JavaScript templates
 index.ejs
app.set('view engine','ejs')
res.render('index',{obj})
to get the in home.html

<%= obj.name %>

--------

npm i ejs

in server .js 
app.set('')

view filer 
newpassword.ejs


forgotpassword? 
+newpage+ enter email  submit
--api(post)
--body(email
1 email-find user)
2 token generate
3 user push token
4: mail send

2 gmail//localhost: get params(toekn)
Enter new pasword: submit
--> api (post)
body(new password )
token
backend: token find user
oasswirdupdate
token-NodeMailerEmail
res.render


cloudnary::


IMAGE HANDLIngling
upload.html
baby.js
buton onlick=""
inpuut oonchange

let value=e.target,files[0]
file in object tyoe

InputMismatchException// oto show  img directly useing 
url.createObjectUrl(value)

let reader=new FileReader();
reader.readAsDtaURL(value)
promise return
reaser.onload(){
  image.src=reader.result
}
reader.oneroro()


let image=document.querySelector('im)

time-ago JavaScript
https://www.npmjs.com/package/javascript-time-ago


material UI
instagram post
> joy UI
//npm install @mui/joy @emotion/react @emotion/styled
//npm install @mui/icons-material


ant design
npm i antd

import { Button, Modal } from 'antd';



classname="w-[100%] h-[100%] object-contain " will make the image not cut at the top

if refresh again 
triger get allelement in props and at submit button
  > w-[100%] h-[100%] object-contain
  auto ply the VISUALcode
  in controls autoPlay muted video controls

  in file can read and

  app.use(express.json({limit:"50mb"}))
  className='capitalize' 

  updaload the image and data on screen
  createurlreader


  ----------------_CLOUDNARY::

  cloudnarys in dashboard  you can get appi key and api secret Key
  upload present
  add upload present

  unsigned 
  upload prest name: twitterApp
  click on save
  Programiable Media
  getting started
  react
  copy npm i @cloudinary/url-gen @cloudinary/react  in frontend

  Change to unsigned for uploading directly from the browser or embedded upload widget
npm i @cloudinary/url-gen @cloudinary/react

POST MAN 
> send postman in POST
form-data:
title:

in uploads:
Upload 

file reader
cloudnary is not free space : small url
to save the photo and videos on cloud

https://api.cloudinary.com/v1_1/dqtjqk1mn/upload
upload_preset:twitterApp text
file: file

give the live pic url

