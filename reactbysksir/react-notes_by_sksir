>>>react is javascript library
>>> to live the project:: Goto Vercel.com https://vercel.com/sakshi0303s-projects/hanumant-fullstack
createreact app ecomerse:
>>context API
if API key is over:: 
in edamam.com developer recipe login https://www.edamam.com/
crearte new application
receipe Seacrh App

--> props are used to pass data from mparent component to child component
Project 
Porject1
create application


>> !importt to make more important
html,body{
    bcg:black

useref
usestate
uselocation
usenavigate
useeffect
}
>it has re-usable component, decrease app size and fast
>it has single page Application ( if we click on one link the Page doesnt reload)
    > whole DOM is recreated agian and again on load< react doesnt load again and again>
> it has hooks and props
> Component: A reuseable piece of code . It is of 2 types
      > Function Component  
          >declare normal js fucntion and return atleast one element
          > this is the simpler way of defining component in react. fucntion component can be declare just like nornal function in javascript that must return react element.
      > Class Component:

>>Main.js(throuh npm create vite@latest)/index.js (npx create-react-app frontend)
>App.js (serving of components)

> Component:
    Home.js
    About.jsx
    ContactJS.jsx
    NavBar.jsx

props:  with the help of props we can pass data from parent component to child component

vice-versa is possible 

>npx create-react-app frotnend
>npm start
>rename App.js to App.jsx
>create componeet and router , do rafce
>npm i react-router-dom

in jsx::: we get the suggestion like p  (if page is not shown then it we can browse the page by ourself, it will reflect later)
in js: we will not get the suggest

npm i react-router-dom
// BrowserRouter --> it will tell the browser theat we will use routing in out application
// routes: container that has router
// download npm i react-router-dom


download ES7+ React/Redux/React-Native snippets : for abbreication in react 

prewriten code and we can reuse it
?tailwind: css framework
?bootstrap : open source css frameword. we can make responsive design


download bootstrap --> npm i bootstrap@5.3.3

package.lock.json: "complete dependency" (browserrouter,routes,route)
package.json:main depenenday (react-router-dom)


paste the bootstap navcode from Bootstap website and paste inside navbar.jsx
and change the class= to className= and put /> 


download following  extentions::::
> auto close tag
> Auto Complete Tag
> auto rename tag
> ES7 React/Redux/GraphQL/React-Native snippets
> html to JSX
> JavaScript (ES6) code snippets
> Material Icon Theme
> React Hooks Snippets


in App.jsx
import 'bootstrap/dist/css/bootstrap.min.css'
import 'bootstrap/dist/js/bootstrap.bundle.min'


//edamam.com :registerd -Project choose your plan: Reciepe Search Api Developer

// breakpoints css for responsive 

// always use backgroud and delete afterwars
//in javascript put in console., window.lcoaton="/"
// reacts- hooks snippet 

let navigate=useNavigate(x)

>react icons=https://react-icons.github.io/react-icons/
>npm i react-icons

USE REDUCER-------Reducer hook (urdh) ------------->>>>>>>>

>with one hook it perform multiple actions
>useReducer in react is alternate and better version of use State
>reducer function can be intitalised above component
>it has 2 arguemnet current state, function dispatch and by default  state value
    cosnt [state,dispatch ]=use Reducer(reducers,{count:0})
    cosnt reducers=(state,action)=>{
    if actin--"increment"{
    }
    }

>button onclick={()=>dispatch('increment')}
>reducer will always return  (important)


>redux toolkit ;; work mainly with reducer

counter app, expess tracker


-------REDUC TOOL KIT quick start // https://redux-toolkit.js.org/tutorials/quick-start 


> npm install @reduxjs/toolkit react-redux
/// counter app search on  redux toolkit quick start // https://redux-toolkit.js.org/tutorials/quick-start   (select javascript)
> only one store MALL configure stro
> multiple shops
> Provide store={Store} at index.js react-redux it should be store only 
>ExpenseSlice.js
> //  ctx=useSelector((state)=>state.expence) it has all slices one by one
> let dispact=useDispatch()
> inside reducer: we dont have to return 
